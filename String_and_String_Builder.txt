String , String Builder , Int to String builder to int 

1.	String and references

package p5;

public class Demo1 {

	public static void main(String[] args) {
		String s1="Cognizant";//String is immutable,changes cannot be made in existing location
		String s2="Cognizant";//as data is same, new object is not created,same reference
		String s3=new String("Cognizant");//new object is created irrespectively
		//s1=s1+"Bangalore";//new location(object) is made for change in data
		s1.toUpperCase();//new location(object) is made for change in data
		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s3);
		//3 objects are created and 1 object is taken into garbage collection
		if (s1==s2){  //compares with hashCode and reference
			System.out.println("Yes");//"==" compares reference
		}
		else{
			System.out.println("No");
		}
		if (s1==s3){
			System.out.println("Yes");
		}
		
		else{
			System.out.println("No");
		}
		
		if (s1.equals(s2)){
			System.out.println("Yes");//".equals" compares data
		}
		else{
			System.out.println("No");
		}
		if (s1.equals(s3)){
			System.out.println("Yes");
		}
		else{
			System.out.println("No");
		}


	}

}


2. String Builder and String
	
package p5;

public class Demo2 {

	public static void main(String[] args) {
		String s1="Cognizant";
		String s2=s1;
		StringBuilder s3=new StringBuilder("Cognizant");
		StringBuilder s4=s3;
		s1=s1+"Bangalore";
		s3.append("Bangalore");//stringbuilder needs append
		//3 objects created, no objects gone to garbage collection
		s3.reverse();//stringbuilder doesn't need assign("=")
		//stringbuilder is mutable,string is immutable
		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s3);
		System.out.println(s4);
		
		
	}

}

3.	Int to a String bulder and back to Int
 
package p5;

public class Demo3 {

	public static void main(String[] args) {
		int a1 = 456;
		a1 = Integer.parseInt(new StringBuilder
				(String.valueOf(a1)).reverse().toString());
		System.out.println(a1);

	}

}


String Tokenizer and split

package p6;

import java.util.StringTokenizer;

import sun.util.locale.StringTokenIterator;

class Test1{
	public static int getWords(String x){
	//String a1[]=x.split(" "); " " is a delimiter
		return x.split(" ").length;
	}
	public static void printWords(String x,String reg){
		String a1[]=x.split(reg);
		for(int i=0;i<a1.length;i++){
			System.out.println(a1[i]);
		}
		for(String ax:x.split(reg)){// or String ax:a1
		System.out.println(ax);
		for(String ax1:ax.split("-")){
			System.out.println(ax1);
			}
		}
	}
	public static String getBword(String x,String regex){
		String word="";
		for(String ax:x.split(regex)){
			if(word.length()<=ax.length()){
				word=ax;
			}
			
		}
		return word;
	}
	public static String getBword1(String x,String regex){
		String word="";
		for(String ax:x.split(regex)){
			for(String ax1:ax.split("-")){
			if(word.length()<=ax1.length()){
				word=ax1;
			}
			}
		}
		return word;
	}
	public static void printWord1(String s1,String regex){
		StringTokenizer s2=new StringTokenizer(s1,regex,true);
		while(s2.hasMoreTokens()){
			String s3=s2.nextToken();
			System.out.println(s3);
		}
	}
	
}

public class Demo {

	public static void main(String[] args) {
		String s1="Ban-galore is a popu-lated city";
		//System.out.println(Test1.getWords(s1));//getWords is a static, so call by class name
		//Test1.printWords(s1," ");
		//System.out.println(Test1.getBword1(s1, " "));
		Test1.printWord1(s1,"-");
	}

}



Accept a string and check if the string is email or not
Accept a string and print number of words in the string
Write a method to print each method in each sentence
Using stringtokenizer, find the smallest word
Write a method to count a given word
Replace "a" with "A" 
Replace all special characters with "*"
Replace all numbers with "*" 


Count of a word

package p6;
class Test2{
	public static int getCount(String s1, String s2){
		int c=0,k=-1;
		while(true){
			k=s1.indexOf(s2,k+1);
			if(k==-1){
				break;
			}
			c++;
		}
		return c;
	}
}
public class Demo1 {

	public static void main(String[] args) {
		String s1="Hai Beta Class people, You are in Beta,Beta";
		System.out.println(Test2.getCount(s1,"Beta"));
	}

}



Regex Character classes
No.	Character Class	Description
1	[abc]	        a, b, or c (simple class)
2	[^abc]	        Any character except a, b, or c (negation)
3	[a-zA-Z]	a through z or A through Z, inclusive (range)
4	[a-d[m-p]]	a through d, or m through p: [a-dm-p] (union)
5	[a-z&&[def]]	d, e, or f (intersection)
6	[a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
7	[a-z&&[^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)



Regex Quantifiers

The quantifiers specify the number of occurrences of a character.

Regex	Description
X?	X occurs once or not at all
X+	X occurs once or more times
X*	X occurs zero or more times
X{n}	X occurs n times only
X{n,}	X occurs n or more times
X{y,z}	X occurs at least y times but less than z times



Count of Index
package p6;
class Test2{
	public static int getCount(String s1, String s2){
		int c=0,k=-1;
		while(true){
			k=s1.indexOf(s2,k+1);
			if(k==-1){
				break;
			}
			c++;
		}
		return c;
	}
}
public class Demo1 {

	public static void main(String[] args) {
		String s1="Hai Beta Class people, You are in Beta,Beta";
		System.out.println(Test2.getCount(s1,"Beta"));
	}

}


Convertion of characters

package p6;
class Test3{
	public static String convert(String s1,String s2){
		
		return s1.replace("a",s2);
	}
	
}
public class StoU {

	public static void main(String[] args) {
		String s1="1Hai - 35546Harshit,all. t5he best";
		s1=Test3.convert(s1, "A");
		System.out.println(s1);
		s1=s1.replace("A","a");
		System.out.println(s1);
		//s1=s1.replaceAll("[ ,.-]","" );
		//System.out.println(s1);		
		s1=s1.replaceAll("[0-9]","*" );
		System.out.println(s1);
		String s2="[a-zA-Z]{3}[0-9].*";
		String s0="12@abc9def.com";
		String s3=".+@.*(.com)";
		System.out.println(s0.matches(s3));
		
	}
}
